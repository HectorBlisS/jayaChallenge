{"version":3,"sources":["components/Chart.js","components/Table.js","components/Ajax.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["datas","x","y","exampleData","Chart","useState","text","setText","axis","setAxis","rows","setRows","xLabel","setXLabel","yLabel","setYLabel","data","setData","getAxis","split","slice","ax","useEffect","style","styles","container","form","onChange","value","target","cols","selects","index","indexOf","ds","forEach","i","Number","formatYData","select","disabled","selected","map","a","key","formatXData","chart","height","width","labels","animate","duration","onLoad","theme","VictoryTheme","material","interpolation","position","top","display","justifyContent","alignItems","flexDirection","marginTop","Table","columns","renderFunc","margin","border","url","Ajax","comments","setComments","users","setUsers","posts","setPosts","axios","get","then","res","user","onClick","userId","id","name","email","length","post","postId","hand","title","comment","cursot","Routes","exact","path","component","App","background","color","textDecoration","activeStyle","to","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bed4022c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { VictoryLine, VictoryTheme, VictoryChart } from \"victory\";\n\nconst datas = [\n    { x: 5, y: 80 },\n    { x: 10, y: 50 },\n];\n\n\nlet exampleData = `date,amount,spent\n2020-01-01,01,100\n2020-01-02,10,400\n2020-01-03,05,300\n2020-01-04,20,200\n2020-01-05,06,500`\n\nexport default function Chart() {\n    let [text, setText] = useState(exampleData)\n    let [axis, setAxis] = useState([])\n    let [rows, setRows] = useState([])\n    let [xLabel, setXLabel] = useState(\"X axis\")\n    let [yLabel, setYLabel] = useState(\"Y axis\")\n\n    let [data, setData] = useState(datas)\n\n    useEffect(() => {\n        getAxis(exampleData)\n    }, [])\n\n    function onChange({ target: { value } }) {\n        setText(value)\n        getAxis(value)\n    }\n\n    function getAxis(exampleData) {\n        let rows = exampleData.split('\\n')\n        setRows(rows.slice(1))\n        let ax = rows[0].split(\",\")\n        setAxis(ax)\n    }\n\n    function onSelectXAxis({ target: { value } }) {\n        // validate to splice the one selected in the other axis\n        setXLabel(value)\n        formatXData(value)\n    }\n\n    function onSelectYAxis({ target: { value } }) {\n        // validate to splice the one selected in the other axis\n        setYLabel(value)\n        formatYData(value)\n    }\n\n    function formatXData(value) {\n        let index = axis.indexOf(value)\n        let ds = [...data]\n        rows.forEach((data, i) => {\n            let x = data.split(',')[index]\n            if (!ds[i]) ds[i] = { x: 0, y: 0 }\n            if (index === 0) ds[i].x = x\n            else ds[i].x = Number(x)\n            // validate date\n        })\n        setData(ds)\n    }\n\n    function formatYData(value) {\n        let index = axis.indexOf(value)\n        let ds = [...data]\n        rows.forEach((data, i) => {\n            let y = data.split(',')[index]\n            if (!ds[i]) ds[i] = { x: 0, y: 0 }\n            if (index === 0) ds[i].y = y\n            else ds[i].y = Number(y)\n            // validate date\n        })\n        setData(ds)\n    }\n\n    return (\n        <div style={styles.container}>\n            <h2>Chart display</h2>\n            <div style={styles.form}>\n\n                <textarea onChange={onChange} cols=\"40\" rows=\"3\" value={text}></textarea>\n                <div style={styles.selects}>\n                    <label>\n                        Y axis\n                        <select onChange={onSelectYAxis} style={styles.select}>\n                            <option disabled selected >Selecciona el axis Y</option>\n                            {axis.map(a => (<option key={a} value={a} >{a}</option>))}\n                        </select>\n                    </label>\n                    <label>\n                        X axis\n                        <select onChange={onSelectXAxis} style={styles.select}>\n                            <option disabled selected >Selecciona el axis X</option>\n                            {axis.map(a => (<option key={a} value={a} >{a}</option>))}\n                        </select>\n                    </label>\n\n\n                </div>\n            </div>\n            <p>This app doesn't have buttons because is 100% reactive</p>\n\n            <div style={styles.chart}>\n                <h2>{yLabel}</h2>\n                <VictoryChart\n                    style={{ height: \"inherit\" }}\n                    yLabel={\"mijo\"}\n                    width={600}\n                    labels={\"mijo\"}\n                    animate={{\n                        duration: 2000,\n                        onLoad: { duration: 1000 }\n                    }} theme={VictoryTheme.material} >\n\n                    <VictoryLine\n                        interpolation=\"natural\"\n                        data={data} />\n\n                </VictoryChart>\n                <h2 style={{ position: \"relative\", top: -100 }}>{xLabel}</h2>\n            </div>\n\n        </div >\n    )\n}\n\nlet styles = {\n    container: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        height: \"85vh\"\n    },\n    form: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"row\",\n    },\n    chart: {\n        marginTop: 10\n    },\n    select: {\n        width: \"150px\"\n    },\n    selects: {\n        display: \"flex\",\n        flexDirection: \"column\"\n    }\n}\n\nChart.propTypes = {\n\n}","import React from 'react'\nimport PropTypes from 'prop-types'\n\n\nexport default function Table({ columns, rows, renderFunc }) {\n    return (\n        <div>\n            <table style={{ margin: \"0 auto\" }} width=\"80%\" border=\"1\">\n                <thead>\n                    <tr>\n                        <th>\n                            {columns[0]}\n                        </th>\n                        <th>\n                            {columns[1]}\n                        </th>\n                        <th>\n                            {columns[2]}\n                        </th>\n                    </tr>\n\n                </thead>\n                <tbody>\n                    {rows.map(renderFunc)}\n                </tbody>\n            </table>\n        </div>\n    )\n}\n\nTable.propTypes = {\n    columns: PropTypes.array.isRequired,\n    rows: PropTypes.array.isRequired,\n    renderFunc: PropTypes.func.isRequired\n}","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Table from './Table'\n\nconst url = \"http://jsonplaceholder.typicode.com/\"\n\nexport default function Ajax() {\n    let [comments, setComments] = useState([])\n    let [users, setUsers] = useState([])\n    let [posts, setPosts] = useState([])\n    useEffect(getData, [])\n\n    function getComments(postId) {\n        axios.get(`${url}posts?postId=${postId}`)\n            .then(res => {\n                setComments(res.data)\n            })\n    }\n\n    function getData() {\n        axios.get(url + \"users\")\n            .then(res => {\n                setUsers(res.data)\n            })\n    }\n\n    function getPosts(userId) {\n        axios.get(`${url}posts?userId=${userId}`)\n            .then(res => {\n                setPosts(res.data)\n            })\n    }\n\n    function renderRow(user, i) {\n        return (\n            <tr key={i}>\n                <td onClick={() => getPosts(user.id)} >{user.id}</td>\n                <td>{user.name}</td>\n                <td>{user.email}</td>\n            </tr>\n        )\n\n    }\n\n    function renderPost(post, i) {\n        return (\n            <tr key={i}>\n                <td onClick={() => getComments(post.id)} style={styles.hand} >{post.id}</td>\n                <td>{post.userId}</td>\n                <td>{post.title}</td>\n            </tr>\n        )\n    }\n\n    function renderComment(comment, i) {\n        return (\n            <tr key={i}>\n                <td style={styles.hand} >{comment.id}</td>\n                <td>{comment.userId}</td>\n                <td>{comment.title}</td>\n            </tr>\n        )\n    }\n\n    return (\n        <div>\n            <h2>Users tables</h2>\n            <div>\n                <Table\n                    renderFunc={renderRow}\n                    rows={users}\n                    columns={[\"id\", \"Name\", \"Email\"]} />\n            </div>\n            <hr />\n            {posts.length !== 0 && <Table\n                renderFunc={renderPost}\n                rows={posts}\n                columns={[\"id\", \"userId\", \"Title\"]} />}\n            <hr />\n            {comments.length !== 0 && <Table\n                renderFunc={renderComment}\n                rows={comments}\n                columns={[\"id\", \"userId\", \"text\"]} />}\n        </div>\n    )\n}\n\nconst styles = {\n    hand: {\n        cursot: \"pointer\"\n    }\n}","import React from 'react'\nimport Chart from './components/Chart'\nimport Ajax from './components/Ajax'\nimport { Switch, Route } from 'react-router-dom'\n\nexport default function Routes() {\n    return <Switch>\n        <Route exact path=\"/\" component={Chart} />\n        <Route path=\"/ajax\" component={Ajax} />\n    </Switch>\n}","import React from 'react';\nimport './App.css';\nimport Routes from './Routes';\nimport { NavLink } from 'react-router-dom'\n\nfunction App() {\n  return (\n    <div>\n      <nav style={{\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"space-around\",\n        height: 54,\n        width: \"100%\",\n        background: \"linear-gradient(to top right, orange, red)\"\n      }}>\n        <NavLink style={{ color: \"white\", textDecoration: \"none\" }} activeStyle={{ color: \"purple\" }} exact to=\"/\" >Char exercise</NavLink>\n        <NavLink style={{ color: \"white\", textDecoration: \"none\" }} activeStyle={{ color: \"purple\" }} to=\"/ajax\" >Ajax exercise</NavLink>\n        <NavLink style={{ color: \"white\", textDecoration: \"none\" }} activeStyle={{ color: \"purple\" }} to=\"/exit\" >Salir</NavLink>\n      </nav>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom'\n\nlet WithRoute = () => <BrowserRouter><App /></BrowserRouter>\n\nReactDOM.render(<WithRoute />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}